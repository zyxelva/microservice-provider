<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"
	   default-lazy-init="true">

	<description>Spring Configuration</description>

	<!-- product模块 -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="masterDataSource" />
      <property name="typeAliasesPackage" value="com.taeyeon.zyx"/>
      <property name="typeAliasesSuperType" value="com.taeyeon.zyx.persistence.BaseEntity"/>
      <property name="mapperLocations">
       	<list>
       		<value>classpath:/mapping/**/*.xml</value>
       	</list>
       </property>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
   </bean>

	<!-- product模块-->
	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.taeyeon.zyx.dao"/>
        <property name="annotationClass" value="com.taeyeon.zyx.persistence.annotation.MyBatisDao"/>
    </bean>
    
    <!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="masterDataSource" />
	</bean>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    
	<!-- 数据源配置, 使用 druid 数据库连接池 -->
	<!-- 定义连接池方式的数据源 -->
	<bean id="abstractDataSource"  abstract="true">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 配置监控统计拦截的filters -->
		<!--<property name="filters" value="stat" />-->
	</bean>
	
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" parent="abstractDataSource" init-method="init">
		<property name="url" value="${jdbc.url}" />
		<property name="filters" value="config" />
		<property name="connectionProperties" value="config.decrypt=false;config.decrypt.key=${jdbc.publickey}" />
	</bean>

</beans>